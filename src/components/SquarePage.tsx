import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Dimensions,
  TouchableOpacity,
  FlatList,
  Animated,
} from 'react-native';

const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

interface BannerItem {
  id: string;
  title: string;
  subtitle: string;
  backgroundColor: string;
}

interface ListItem {
  id: string;
  title: string;
  content: string;
  time: string;
  avatar: string;
}

const SquarePage: React.FC = () => {
  const [currentBannerIndex, setCurrentBannerIndex] = useState(0);
  const scrollX = useRef(new Animated.Value(0)).current;

  // ËΩÆÊí≠ÂõæÊï∞ÊçÆ
  const bannerData: BannerItem[] = [
    {
      id: '1',
      title: 'ÁÉ≠Èó®ËØùÈ¢ò',
      subtitle: 'Êé¢Á¥¢ÊúÄÊñ∞ÁöÑÊäÄÊúØËÆ®ËÆ∫',
      backgroundColor: '#FF6B6B',
    },
    {
      id: '2',
      title: 'ÊäÄÊúØÂàÜ‰∫´',
      subtitle: 'Â≠¶‰π†‰ºòÁßÄÂºÄÂèëÁªèÈ™å',
      backgroundColor: '#4ECDC4',
    },
    {
      id: '3',
      title: 'Á§æÂå∫Ê¥ªÂä®',
      subtitle: 'ÂèÇ‰∏éÁ∫ø‰∏ã‰∫§ÊµÅ‰ºö',
      backgroundColor: '#45B7D1',
    },
    {
      id: '4',
      title: 'ÂºÄÊ∫êÈ°πÁõÆ',
      subtitle: 'Ë¥°ÁåÆ‰ª£Á†ÅÂíåÊÉ≥Ê≥ï',
      backgroundColor: '#96CEB4',
    },
  ];

  const listData: ListItem[] = [
    {
      id: '1',
      title: 'React Native ÊÄßËÉΩ‰ºòÂåñÊåáÂçó',
      content: 'ËØ¶ÁªÜ‰ªãÁªç‰∫ÜÂ¶Ç‰Ωï‰ºòÂåñ React Native Â∫îÁî®ÁöÑÊÄßËÉΩ...',
      time: '2Â∞èÊó∂Ââç',
      avatar: 'üë®‚Äçüíª',
    },
    {
      id: '2',
      title: 'TypeScript ÊúÄ‰Ω≥ÂÆûË∑µ',
      content: 'ÂàÜ‰∫´ TypeScript Âú®ÂÆûÈôÖÈ°πÁõÆ‰∏≠ÁöÑÂ∫îÁî®ÁªèÈ™å...',
      time: '5Â∞èÊó∂Ââç',
      avatar: 'üìò',
    },
    {
      id: '3',
      title: 'Node.js ÂæÆÊúçÂä°Êû∂ÊûÑ',
      content: 'ËÆ≤Ëß£‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî® Node.js ÊûÑÂª∫ÂæÆÊúçÂä°Â∫îÁî®...',
      time: '8Â∞èÊó∂Ââç',
      avatar: 'üöÄ',
    },
    {
      id: '4',
      title: 'ÂâçÁ´ØÂ∑•Á®ãÂåñÂÆûË∑µ',
      content: 'Áé∞‰ª£ÂåñÁöÑÂâçÁ´ØÂ∑•Á®ãÂåñÂºÄÂèëÁªèÈ™åÂíåÂ∑•ÂÖ∑Èìæ...',
      time: '12Â∞èÊó∂Ââç',
      avatar: '‚ö°',
    },
    {
      id: '5',
      title: 'Vue 3 ÁªÑÂêàÂºèAPIËØ¶Ëß£',
      content: 'Ê∑±ÂÖ•ÁêÜËß£ Vue 3 ÁöÑÊñ∞ÁâπÊÄßÂíåÁªÑÂêàÂºèAPI...',
      time: '1Â§©Ââç',
      avatar: 'üíö',
    },
    {
      id: '6',
      title: 'GraphQL ÂÆûÊàòÊïôÁ®ã',
      content: '‰ªéÈõ∂ÂºÄÂßãÂ≠¶‰π† GraphQL ÁöÑ‰ΩøÁî®ÂíåÊúÄ‰Ω≥ÂÆûË∑µ...',
      time: '16Â∞èÊó∂Ââç',
      avatar: 'üìä',
    },
  ];

  // Ëá™Âä®ËΩÆÊí≠
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentBannerIndex((prevIndex) => {
        const nextIndex = (prevIndex + 1) % bannerData.length;
        console.log(`Auto scrolling banner from ${prevIndex} to ${nextIndex}`);
        
        // ‰ΩøÁî® Animated.timing ËøõË°åÊªöÂä®
        Animated.timing(scrollX, {
          toValue: -nextIndex * screenWidth,
          duration: 300,
          useNativeDriver: true,
        }).start();
        
        return nextIndex;
      });
    }, 3000);

    return () => {
      clearInterval(interval);
      scrollX.stopAnimation();
    };
  }, []);

  // Ê∏≤ÊüìÂàóË°®È°π
  const renderListItem = ({ item }: { item: ListItem }) => (
    <TouchableOpacity style={styles.listItem} activeOpacity={0.7}>
      <View style={styles.listItemLeft}>
        <Text style={styles.avatar}>{item.avatar}</Text>
      </View>
      <View style={styles.listItemRight}>
        <View style={styles.listItemHeader}>
          <Text style={styles.listItemTitle}>{item.title}</Text>
          <Text style={styles.listItemTime}>{item.time}</Text>
        </View>
        <Text style={styles.listItemContent} numberOfLines={2}>
          {item.content}
        </Text>
      </View>
    </TouchableOpacity>
  );

  // Ê∏≤ÊüìËΩÆÊí≠Âõæ
  const renderBanner = () => (
    <View style={styles.bannerContainer}>
      <View style={styles.bannerWrapper}>
        <Animated.View
          style={[
            styles.bannerRow,
            {
              transform: [{ translateX: scrollX }],
            },
          ]}
        >
          {bannerData.map((item, index) => (
            <View key={item.id} style={[styles.bannerItem, { backgroundColor: item.backgroundColor }]}>
              <View style={styles.bannerContent}>
                <Text style={styles.bannerTitle}>{item.title}</Text>
                <Text style={styles.bannerSubtitle}>{item.subtitle}</Text>
              </View>
            </View>
          ))}
        </Animated.View>
      </View>
      
      {/* ÊåáÁ§∫Âô® */}
      <View style={styles.bannerIndicator}>
        {bannerData.map((_, dotIndex) => (
          <View
            key={dotIndex}
            style={[
              styles.dot,
              dotIndex === currentBannerIndex && styles.activeDot,
            ]}
          />
        ))}
      </View>
    </View>
  );

  return (
    <FlatList
      data={listData}
      renderItem={renderListItem}
      keyExtractor={(item) => item.id}
      showsVerticalScrollIndicator={false}
      contentContainerStyle={styles.listContent}
      ListHeaderComponent={renderBanner}
    />
  );
};

const styles = StyleSheet.create({
  // ËΩÆÊí≠ÂõæÊ†∑Âºè
  bannerContainer: {
    width: screenWidth,
    height: 200,
    position: 'relative',
    overflow: 'hidden',
  },
  bannerWrapper: {
    width: screenWidth,
    height: 200,
  },
  bannerRow: {
    flexDirection: 'row',
    width: screenWidth * 4, // bannerData.lengthÔºåÊöÇÊó∂ÂÜôÊ≠ª‰∏∫4
    height: 200,
  },
  bannerItem: {
    width: screenWidth,
    height: 200,
    justifyContent: 'center',
    alignItems: 'center',
  },
  bannerContent: {
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  bannerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 8,
  },
  bannerSubtitle: {
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
    opacity: 0.9,
  },

  // ÊåáÁ§∫Âô®Ê†∑Âºè
  bannerIndicator: {
    position: 'absolute',
    bottom: 20,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  dot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#FFFFFF',
    opacity: 0.4,
    marginHorizontal: 4,
  },
  activeDot: {
    opacity: 1,
    width: 20,
    borderRadius: 4,
  },

  // ÂàóË°®Ê†∑Âºè
  listContent: {
    paddingBottom: 20,
  },

  // ÂàóË°®È°πÊ†∑Âºè
  listItem: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    marginHorizontal: 16,
    marginVertical: 8,
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  listItemLeft: {
    marginRight: 12,
  },
  avatar: {
    fontSize: 32,
  },
  listItemRight: {
    flex: 1,
  },
  listItemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  listItemTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333',
    flex: 1,
  },
  listItemTime: {
    fontSize: 12,
    color: '#999999',
  },
  listItemContent: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20,
  },

  // ÂàóË°®Ê†áÈ¢òÊ†∑Âºè
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333',
    marginHorizontal: 16,
    marginTop: 16,
    marginBottom: 8,
  },
});

export default SquarePage;